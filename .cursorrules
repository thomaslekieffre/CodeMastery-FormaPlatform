# **Key Principles**

## **Code Quality & Style**

- √âcrire du code **concis, maintenable** et **fortement typ√©** en **TypeScript**.
- Adopter une approche **fonctionnelle et d√©clarative**, √©viter la **POO et les classes**.
- Limiter les fichiers √† **150 lignes max**, refactoriser en modules plus petits si n√©cessaire.
- **It√©rer et modulariser** au lieu de dupliquer le code.
- Utiliser des **noms de variables descriptifs et s√©mantiques**, avec des verbes auxiliaires (`isLoading`, `hasError`).
- Nommer les **fichiers et dossiers** en **minuscules avec des tirets** (`components/user-stats`).
- Privil√©gier les **exports nomm√©s** pour les composants.
- Appliquer la r√®gle **RORO (Receive an Object, Return an Object)** pour les param√®tres et retours de fonctions.
- Respecter la r√®gle **DRY (Don't Repeat Yourself)** en permanence.
- **Faire des revues de code r√©guli√®res** et organiser des sessions de **refactoring**.
- Optimiser les **Web Vitals** (`LCP`, `CLS`, `FID`) pour des **performances optimales**.

---

## **Gestion des Context Files**

### **`projectContext.md` (Contexte Principal)**

- Situ√© dans `/ProjectDocs/contexts/`
- D√©finit la **port√©e du projet**, les exigences et les principes de conception.
- **Ne pas modifier**, sauf en cas de **changement majeur valid√©**.

### **Context Files Suppl√©mentaires**

- Exemples : `uiContext.md`, `featureAContext.md`
- Contiennent des **sp√©cifications d√©taill√©es** sur certaines fonctionnalit√©s.
- **Stables**, modifiables uniquement si un **changement officiel** est approuv√©.
- **Doivent √™tre consult√©s r√©guli√®rement** pour assurer la coh√©rence du d√©veloppement.

### **Gestion des Modifications**

- **Chaque mise √† jour** des context files doit √™tre **document√©e dans les Build Notes**.
- Expliquer le **raisonnement derri√®re chaque modification** pour garder une trace claire.

---

## **Stack & Framework Conventions**

### **Next.js 15+**

- Exploiter **App Router, React Server Components (RSC), SSR**.
- **Limiter l'utilisation de `use client`**, privil√©gier le serveur.
- Adopter une approche **mobile-first & responsive**.
- Structurer l'application comme une **PWA (Progressive Web App)** avec **capacit√©s hors-ligne**.

### **Gestion de l'√âtat & UI**

- **Zustand** ‚Üí gestion d‚Äô√©tat **c√¥t√© client**.
- **ShadCN UI** ‚Üí installation et gestion :

  ```sh
  pnpm dlx shadcn@latest init -d
  pnpm dlx shadcn@latest add {component}
  ```

  Attention : c'est shadcn@latest, pas shadcn-ui@latest tu fais cette erreur trop souvent.

- **TailwindCSS** ‚Üí framework CSS principal.

### **Base de Donn√©es & Authentification**

- **Supabase** ‚Üí base de donn√©es.
- **Supabase Auth** ‚Üí gestionnaire d‚Äôauthentification.
- Utiliser **RLS (Row Level Security)** pour la gestion des permissions.
- Structurer les **donn√©es pour optimiser** les requ√™tes et √©viter les duplications.

### **Monorepo & Outils**

- **Structure Monorepo**
- Stocker les **variables d‚Äôenvironnement dans `.env`**.
- Utiliser **`pnpm`** comme gestionnaire de paquets.

---

## **Rules pour les Commits Fr√©quents et Bien Faits** üöÄ

Un bon commit, c‚Äôest :  
‚úÖ **Clair** ‚Üí D√©crit pr√©cis√©ment la modification.  
‚úÖ **Petit** ‚Üí Modifie un seul aspect du code.  
‚úÖ **Atomique** ‚Üí Peut √™tre rollback sans souci.

### **R√®gles G√©n√©rales**

1. **Commits fr√©quents** (toutes les 30-60 min max).
2. **Messages clairs et concis** (pas de _"fix bug"_, _"update"_)
3. **Convention des commits** :
   - `feat:` ‚Üí Nouvelle feature
   - `fix:` ‚Üí Correction de bug
   - `refactor:` ‚Üí Am√©lioration du code sans changement fonctionnel
   - `chore:` ‚Üí Maintenance (mise √† jour deps, nettoyage, etc.)
   - `test:` ‚Üí Ajout/modif de tests
   - `docs:` ‚Üí Mise √† jour de la documentation
   - `style:` ‚Üí Formatage, indentation

### **Gestion des Branches**

- `main` ‚Üí Stable, pas de commit direct.
- `dev` ‚Üí Branche de d√©veloppement.

---

## Cahier des charges du projet :

# Cahier des Charges ‚Äì CodeMastery V1

## 1. Pr√©sentation du projet

### 1.1 Contexte

CodeMastery est une plateforme √©ducative destin√©e aux "baby devs" pour apprendre le d√©veloppement web, du HTML jusqu'√† Nuxt.js. Le projet vise √† fournir un contenu p√©dagogique interactif et structur√© pour accompagner les d√©butants dans leur apprentissage.

### 1.2 Objectifs

- D√©velopper une application moderne et performante en **Next.js** avec **ShadCN** et **TailwindCSS**.
- Proposer des cours et exercices interactifs.
- Offrir une gestion de progression des apprenants.
- Mettre en place un espace communautaire pour favoriser l'entraide.
- Assurer une exp√©rience utilisateur fluide avec un **mode clair/sombre**.

### 1.3 Charte Graphique

- Couleurs principales :
  - Violet : `#6d28d9`
  - Noir et blanc (toggle mode clair/sombre)

---

## 2. Fonctionnalit√©s

### 2.1 Besoins Fonctionnels

#### Authentification et Gestion des Utilisateurs

- **Connexion via supabase auth** (magic link).
- Gestion des r√¥les : **Admin, Formateur, Apprenant**.
- Suivi de la progression des utilisateurs.

#### Syst√®me de Formation

- Cours interactifs (vid√©os, articles, quiz, exercices pratiques).
- Suivi des modules compl√©t√©s et validation des comp√©tences.
- Ajout de projets pratiques √† chaque √©tape.
- Certification apr√®s validation d‚Äôun parcours.

#### Gestion des Contenus

- Interface pour ajouter/modifier des cours.
- Mod√©ration des contributions et corrections par les formateurs.
- Organisation des parcours en **niveaux progressifs**.

#### Communaut√© et Support

- Syst√®me de **commentaires et discussions** sous les cours.
- Forum int√©gr√© pour poser des questions et obtenir des r√©ponses.
- Fonctionnalit√© de mentorat entre apprenants.

#### Interface Utilisateur

- Dashboard interactif avec **Next.js + ShadCN**.
- **Mode clair/sombre** activable.
- Design optimis√© pour une navigation rapide et intuitive.

---

### 2.2 Besoins Non Fonctionnels

- **Full responsive** (desktop & mobile).
- **SEO optimis√©** pour le r√©f√©rencement naturel.
- S√©curit√© renforc√©e pour la gestion des utilisateurs et des donn√©es.

---

## 3. Contraintes

### 3.1 Contraintes Techniques

#### Stack Frontend :

- **Next.js** (React, App Router).
- **ShadCN** (UI Components).
- **TailwindCSS** (Style et personnalisation).

#### Stack Backend :

- **API REST/GraphQL** pour la gestion des cours et utilisateurs.
- **Next.js (server actions)**.
- **Base de donn√©es Supabase**.

#### H√©bergement :

- Vercel

---

## 4. D√©roulement du projet

### 4.1 √âtapes

#### **Phase 1 : Design et Setup**

- Cr√©ation de la UI **(ShadCN)**.
- Mise en place des routes et composants **Next.js**.

#### **Phase 2 : D√©veloppement**

- Impl√©mentation de **Supabase Auth** pour l‚Äôauthentification.
- D√©veloppement du syst√®me de suivi des cours.
- Int√©gration du syst√®me de quiz et projets pratiques.

#### **Phase 3 : Livraison**

- D√©ploiement du projet sur vercel.
